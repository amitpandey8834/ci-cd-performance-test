name: CI with Performance and Security Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  performance-test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo
        ports: [27017:27017]
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Start the API in background
        run: |
          nohup npm start &
          echo "Waiting for API to be ready on port 3000..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "API is up!"
              break
            else
              echo "Waiting..."
              sleep 2
            fi
          done

      - name: Install K6
        run: |
          sudo apt update
          sudo apt install -y gnupg ca-certificates
          curl -s https://dl.k6.io/key.gpg | sudo apt-key add -
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt update
          sudo apt install -y k6

      - name: Run K6 performance test
        run: k6 run k6-tests/load-test.js

  security-test:
    runs-on: ubuntu-latest
    needs: performance-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Start the API in background
        run: |
          nohup npm start &
          echo "Waiting for API to be ready on port 3000..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "API is up!"
              break
            else
              echo "Waiting..."
              sleep 2
            fi
          done

      - name: Prepare ZAP report directory
        run: mkdir -p zap-report

      - name: Run OWASP ZAP scan using Docker
        run: |
          docker run --rm --network host \
            -v ${{ github.workspace }}/zap-report:/zap/wrk:rw \
            --user root \
            -w /zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py -t http://localhost:3000 -r zap_report.html

      - name: Upload ZAP report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report/zap_report.html
